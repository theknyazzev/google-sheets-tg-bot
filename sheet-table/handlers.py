import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from google_sheets import GoogleSheetsService
from keyboards import Keyboards
from utils import format_row_data, format_search_results, format_columns_list, escape_markdown

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class EditStates(StatesGroup):
    waiting_for_new_value = State()

class SearchStates(StatesGroup):
    waiting_for_search_value = State()
    waiting_for_row_number = State()
    waiting_for_edit_row_number = State()

class NewRowStates(StatesGroup):
    filling_field = State()

class FormulaStates(StatesGroup):
    waiting_for_cell_position = State()
    waiting_for_formula = State()
    waiting_for_validation = State()

class BotHandlers:
    def __init__(self, sheets_service: GoogleSheetsService):
        self.sheets_service = sheets_service
        self.router = Router()
        self.logger = logging.getLogger(__name__)
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.router.message.register(self.start_command, Command("start"))
        self.router.message.register(self.find_command, Command("find"))
        self.router.message.register(self.row_command, Command("row"))
        self.router.message.register(self.cols_command, Command("cols"))
        self.router.message.register(self.edit_command, Command("edit"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        self.router.message.register(self.handle_search_button, F.text == "üîç –ü–æ–∏—Å–∫ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é")
        self.router.message.register(self.handle_get_row_button, F.text == "üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ –Ω–æ–º–µ—Ä—É")
        self.router.message.register(self.handle_all_rows_button, F.text == "üìÑ –í—Å–µ —Å—Ç—Ä–æ–∫–∏")
        self.router.message.register(self.handle_show_columns_button, F.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã")
        self.router.message.register(self.handle_edit_button, F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É")
        self.router.message.register(self.handle_create_new_row_button, F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É")
        self.router.message.register(self.handle_formulas_button, F.text == "üßÆ –†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏")
        self.router.message.register(self.handle_help_button, F.text == "üìù –ü–æ–º–æ—â—å")
        self.router.message.register(self.handle_about_button, F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.router.callback_query.register(self.handle_row_selection, F.data.startswith("select_row:"))
        self.router.callback_query.register(self.handle_edit_row, F.data.startswith("edit_row:"))
        self.router.callback_query.register(self.handle_edit_field, F.data.startswith("edit_field:"))
        self.router.callback_query.register(self.handle_refresh_row, F.data.startswith("refresh_row:"))
        self.router.callback_query.register(self.handle_back_to_row, F.data.startswith("back_to_row:"))
        self.router.callback_query.register(self.handle_confirm_action, F.data.startswith("confirm:"))
        self.router.callback_query.register(self.handle_cancel, F.data.in_({"cancel_search", "cancel_action"}))
        self.router.callback_query.register(self.handle_back_to_menu, F.data == "back_to_menu")
        self.router.callback_query.register(self.handle_action_callback, F.data.startswith("action:"))
        self.router.callback_query.register(self.handle_pagination, F.data.startswith("page:"))
        self.router.callback_query.register(self.handle_fill_field, F.data.startswith("fill_field:"))
        self.router.callback_query.register(self.handle_save_new_row, F.data == "save_new_row")
        self.router.callback_query.register(self.handle_clear_new_row, F.data == "clear_new_row")
        self.router.callback_query.register(self.handle_cancel_new_row, F.data == "cancel_new_row")
        self.router.callback_query.register(self.handle_formula_callback, F.data.startswith("formula:"))
        self.router.callback_query.register(self.handle_example_callback, F.data.startswith("example:"))
        self.router.callback_query.register(self.handle_back_to_formulas, F.data == "back_to_formulas")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
        self.router.message.register(self.handle_new_value_input, EditStates.waiting_for_new_value)
        self.router.message.register(self.handle_search_input, SearchStates.waiting_for_search_value)
        self.router.message.register(self.handle_row_number_input, SearchStates.waiting_for_row_number)
        self.router.message.register(self.handle_edit_row_number_input, SearchStates.waiting_for_edit_row_number)
        self.router.message.register(self.handle_new_row_field_input, NewRowStates.filling_field)
        self.router.message.register(self.handle_cell_position_input, FormulaStates.waiting_for_cell_position)
        self.router.message.register(self.handle_formula_input, FormulaStates.waiting_for_formula)
        self.router.message.register(self.handle_validation_input, FormulaStates.waiting_for_validation)
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.router.message.register(self.handle_unhandled_text)
    
    async def start_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = message.from_user.id
        username = message.from_user.username or "Unknown"
        
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        welcome_text = f"""
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google –¢–∞–±–ª–∏—Ü–µ–π!**

üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/find `[–∑–Ω–∞—á–µ–Ω–∏–µ]` - –ø–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
/row `[–Ω–æ–º–µ—Ä]` - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ –Ω–æ–º–µ—Ä—É
/cols - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
/edit `[–Ω–æ–º–µ—Ä]` - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É

**–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
`/find test@email.com`
`/row 5`
`/edit 10`

‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω. –í–∞—à ID: {user_id}
        """
        
        keyboard = Keyboards.create_main_menu()
        await message.answer(welcome_text, reply_markup=keyboard, parse_mode="Markdown")
    
    async def find_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /find"""
        user_id = message.from_user.id
        command_args = message.text.split(maxsplit=1)
        
        if len(command_args) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n–ü—Ä–∏–º–µ—Ä: `/find test@email.com`", parse_mode="Markdown")
            return
        
        search_value = command_args[1].strip()
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫: '{search_value}'")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await message.answer("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫...")
        
        # –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
        found_rows = self.sheets_service.search_in_sheet(search_value)
        
        if not found_rows:
            await message.answer(f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '**{escape_markdown(search_value)}**' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode="Markdown")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_text = format_search_results(found_rows, search_value)
        keyboard = Keyboards.create_row_selection_keyboard(found_rows)
        
        await message.answer(results_text, reply_markup=keyboard, parse_mode="Markdown")
    
    async def row_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /row"""
        user_id = message.from_user.id
        command_args = message.text.split(maxsplit=1)
        
        if len(command_args) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏.\n–ü—Ä–∏–º–µ—Ä: `/row 5`", parse_mode="Markdown")
            return
        
        try:
            row_number = int(command_args[1].strip())
        except ValueError:
            await message.answer("‚ùå –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        
        if row_number < 2:
            await message.answer("‚ùå –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 1 (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏).")
            return
        
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É {row_number}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É
        row_data = self.sheets_service.get_row_by_number(row_number)
        
        if not row_data:
            await message.answer(f"‚ùå –°—Ç—Ä–æ–∫–∞ {row_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞.")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        columns = self.sheets_service.get_columns()
        formatted_text = format_row_data(row_data, columns)
        keyboard = Keyboards.create_row_actions_keyboard(row_number)
        
        await message.answer(formatted_text, reply_markup=keyboard, parse_mode="Markdown")
    
    async def cols_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cols"""
        user_id = message.from_user.id
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤")
        
        columns = self.sheets_service.get_columns()
        formatted_text = format_columns_list(columns)
        
        await message.answer(formatted_text, parse_mode="Markdown")
    
    async def edit_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit"""
        user_id = message.from_user.id
        command_args = message.text.split(maxsplit=1)
        
        if len(command_args) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: `/edit 5`", parse_mode="Markdown")
            return
        
        try:
            row_number = int(command_args[1].strip())
        except ValueError:
            await message.answer("‚ùå –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        
        if row_number < 2:
            await message.answer("‚ùå –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 1 (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏).")
            return
        
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ö–æ—á–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É {row_number}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
        row_data = self.sheets_service.get_row_by_number(row_number)
        
        if not row_data:
            await message.answer(f"‚ùå –°—Ç—Ä–æ–∫–∞ {row_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        columns = self.sheets_service.get_columns()
        keyboard = Keyboards.create_edit_field_keyboard(row_number, columns)
        
        formatted_text = format_row_data(row_data, columns)
        await message.answer(f"{formatted_text}\n\nüìù **–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**", 
                           reply_markup=keyboard, parse_mode="Markdown")
    
    async def handle_row_selection(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        user_id = callback.from_user.id
        row_number = int(callback.data.split(":")[1])
        
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Å—Ç—Ä–æ–∫—É {row_number}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        row_data = self.sheets_service.get_row_by_number(row_number)
        
        if not row_data:
            await callback.answer("‚ùå –°—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        columns = self.sheets_service.get_columns()
        formatted_text = format_row_data(row_data, columns)
        keyboard = Keyboards.create_row_actions_keyboard(row_number)
        
        await callback.message.edit_text(formatted_text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
    
    async def handle_edit_row(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏"""
        user_id = callback.from_user.id
        row_number = int(callback.data.split(":")[1])
        
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ {row_number}")
        
        columns = self.sheets_service.get_columns()
        keyboard = Keyboards.create_edit_field_keyboard(row_number, columns)
        
        await callback.message.edit_text(
            f"üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ {row_number}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
    
    async def handle_edit_field(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        user_id = callback.from_user.id
        data_parts = callback.data.split(":")
        row_number = int(data_parts[1])
        column_number = int(data_parts[2])
        
        columns = self.sheets_service.get_columns()
        column_name = columns[column_number - 1] if column_number <= len(columns) else f"–°—Ç–æ–ª–±–µ—Ü {column_number}"
        
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–µ '{column_name}' –≤ —Å—Ç—Ä–æ–∫–µ {row_number}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data({
            'row_number': row_number,
            'column_number': column_number,
            'column_name': column_name
        })
        
        await state.set_state(EditStates.waiting_for_new_value)
        
        await callback.message.edit_text(
            f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è '{column_name}'**\n\n"
            f"–°—Ç—Ä–æ–∫–∞: {row_number}\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            parse_mode="Markdown"
        )
        await callback.answer()
    
    async def handle_new_value_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
        user_id = message.from_user.id
        new_value = message.text.strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        row_number = data['row_number']
        column_number = data['column_number']
        column_name = data['column_name']
        
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–±–Ω–æ–≤–ª—è–µ—Ç '{column_name}' –≤ —Å—Ç—Ä–æ–∫–µ {row_number} –Ω–∞ '{new_value}'")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫—É
        success = self.sheets_service.update_cell(row_number, column_number, new_value)
        
        if success:
            await message.answer(
                f"‚úÖ **–ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!**\n\n"
                f"–°—Ç—Ä–æ–∫–∞: {row_number}\n"
                f"–ü–æ–ª–µ: {column_name}\n"
                f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_value}",
                parse_mode="Markdown"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    
    async def handle_refresh_row(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏"""
        user_id = callback.from_user.id
        row_number = int(callback.data.split(":")[1])
        
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ {row_number}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        row_data = self.sheets_service.get_row_by_number(row_number)
        
        if not row_data:
            await callback.answer("‚ùå –°—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        columns = self.sheets_service.get_columns()
        formatted_text = format_row_data(row_data, columns)
        keyboard = Keyboards.create_row_actions_keyboard(row_number)
        
        await callback.message.edit_text(formatted_text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer("üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    
    async def handle_back_to_row(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å—Ç—Ä–æ–∫–∏"""
        user_id = callback.from_user.id
        row_number = int(callback.data.split(":")[1])
        
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å—Ç—Ä–æ–∫–∏ {row_number}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        row_data = self.sheets_service.get_row_by_number(row_number)
        
        if not row_data:
            await callback.answer("‚ùå –°—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        columns = self.sheets_service.get_columns()
        formatted_text = format_row_data(row_data, columns)
        keyboard = Keyboards.create_row_actions_keyboard(row_number)
        
        await callback.message.edit_text(formatted_text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
    
    async def handle_confirm_action(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π"""
        await callback.answer("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
    
    async def handle_cancel(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π"""
        user_id = callback.from_user.id
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        await state.clear()
        
        await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback.answer()

    # === –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ú–ï–ù–Æ ===
    
    async def handle_search_button(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞"""
        await state.set_state(SearchStates.waiting_for_search_value)
        keyboard = Keyboards.create_back_to_menu_keyboard()
        await message.answer(
            "üîç **–ü–æ–∏—Å–∫ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é**\n\n–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ:", 
            reply_markup=keyboard, 
            parse_mode="Markdown"
        )
    
    async def handle_get_row_button(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É"""
        await state.set_state(SearchStates.waiting_for_row_number)
        keyboard = Keyboards.create_back_to_menu_keyboard()
        await message.answer(
            "üìä **–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ –Ω–æ–º–µ—Ä—É**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏:", 
            reply_markup=keyboard, 
            parse_mode="Markdown"
        )
    
    async def handle_show_columns_button(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞ —Å—Ç–æ–ª–±—Ü–æ–≤"""
        user_id = message.from_user.id
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤")
        
        columns = self.sheets_service.get_columns()
        
        if not columns:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º HTML —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤
        text_parts = ["üìä <b>–°—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã:</b>\n"]
        
        for i, column_name in enumerate(columns, 1):
            if column_name:
                safe_column = str(column_name).replace('<', '&lt;').replace('>', '&gt;').replace('&', '&amp;')
                text_parts.append(f"{i}. <b>{safe_column}</b>")
            else:
                text_parts.append(f"{i}. <i>(–ø—É—Å—Ç–æ–π —Å—Ç–æ–ª–±–µ—Ü)</i>")
        
        columns_text = "\n".join(text_parts)
        keyboard = Keyboards.create_back_to_menu_keyboard()
        await message.answer(columns_text, reply_markup=keyboard, parse_mode="HTML")
    
    async def handle_edit_button(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        await state.set_state(SearchStates.waiting_for_edit_row_number)
        keyboard = Keyboards.create_back_to_menu_keyboard()
        await message.answer(
            "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", 
            reply_markup=keyboard, 
            parse_mode="Markdown"
        )
    
    async def handle_help_button(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
        help_text = """
üìù **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

üîç **–ü–æ–∏—Å–∫ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é** - –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
üìä **–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ –Ω–æ–º–µ—Ä—É** - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø–æ –µ–µ –Ω–æ–º–µ—Ä—É
üìÑ **–í—Å–µ —Å—Ç—Ä–æ–∫–∏** - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
üìã **–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã** - –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É** - –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/find [–∑–Ω–∞—á–µ–Ω–∏–µ] - –ø–æ–∏—Å–∫ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
/row [–Ω–æ–º–µ—Ä] - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É
/cols - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã
/edit [–Ω–æ–º–µ—Ä] - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É

**–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º:**
‚Ä¢ ‚¨ÖÔ∏è ‚û°Ô∏è - –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
‚Ä¢ ‚è™ ‚è© - –±—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—á–∞–ª—É/–∫–æ–Ω—Ü—É
‚Ä¢ üìÑ X/Y - —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üîç –ü–æ–∏—Å–∫ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é" –∏ –≤–≤–µ–¥–∏—Ç–µ email
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ –Ω–æ–º–µ—Ä—É" –∏ –≤–≤–µ–¥–∏—Ç–µ 5
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üìÑ –í—Å–µ —Å—Ç—Ä–æ–∫–∏" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        """
        
        keyboard = Keyboards.create_back_to_menu_keyboard()
        await message.answer(help_text, reply_markup=keyboard, parse_mode="Markdown")
    
    async def handle_about_button(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ –±–æ—Ç–µ"""
        about_text = """
‚ÑπÔ∏è **–û –±–æ—Ç–µ**

–ë–æ—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Google –¢–∞–±–ª–∏—Ü–∞–º–∏ –ø—Ä—è–º–æ –∏–∑ Telegram.

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä–æ–∫ –ø–æ –Ω–æ–º–µ—Ä—É
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
‚Ä¢ –£–¥–æ–±–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã

**–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ üìÑ –°–ª–∞–π–¥–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
‚Ä¢ ‚¨ÖÔ∏è ‚û°Ô∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
‚Ä¢ ‚è™ ‚è© –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—á–∞–ª—É/–∫–æ–Ω—Ü—É
‚Ä¢ üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è
‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
        """
        
        keyboard = Keyboards.create_back_to_menu_keyboard()
        await message.answer(about_text, reply_markup=keyboard, parse_mode="Markdown")
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–°–¢–û–Ø–ù–ò–ô FSM ===
    
    async def handle_search_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        search_value = message.text.strip()
        user_id = message.from_user.id
        
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –º–µ–Ω—é: '{search_value}'")
        
        await message.answer("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫...")
        
        # –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
        found_rows = self.sheets_service.search_in_sheet(search_value)
        
        if not found_rows:
            keyboard = Keyboards.create_back_to_menu_keyboard()
            await message.answer(
                f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '**{escape_markdown(search_value)}**' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", 
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results_text = format_search_results(found_rows, search_value)
            keyboard = Keyboards.create_row_selection_keyboard(found_rows)
            await message.answer(results_text, reply_markup=keyboard, parse_mode="Markdown")
        
        await state.clear()
    
    async def handle_row_number_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏"""
        try:
            row_number = int(message.text.strip())
            user_id = message.from_user.id
            
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç—Ä–æ–∫—É {row_number} —á–µ—Ä–µ–∑ –º–µ–Ω—é")
            
            await message.answer("üìä –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            row_data = self.sheets_service.get_row_by_number(row_number)
            
            if not row_data:
                keyboard = Keyboards.create_back_to_menu_keyboard()
                await message.answer(
                    f"‚ùå –°—Ç—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º **{row_number}** –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", 
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            else:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                columns = self.sheets_service.get_columns()
                formatted_text = format_row_data(row_data, columns)
                keyboard = Keyboards.create_row_actions_keyboard(row_number)
                
                await message.answer(formatted_text, reply_markup=keyboard, parse_mode="Markdown")
            
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (—á–∏—Å–ª–æ)")
            return
        
        await state.clear()
    
    async def handle_edit_row_number_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            row_number = int(message.text.strip())
            user_id = message.from_user.id
            
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ö–æ—á–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É {row_number}")
            
            await message.answer("‚úèÔ∏è –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            row_data = self.sheets_service.get_row_by_number(row_number)
            
            if not row_data:
                keyboard = Keyboards.create_back_to_menu_keyboard()
                await message.answer(
                    f"‚ùå –°—Ç—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º **{row_number}** –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", 
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                columns = self.sheets_service.get_columns()
                formatted_text = format_row_data(row_data, columns)
                keyboard = Keyboards.create_row_actions_keyboard(row_number)
                
                await message.answer(formatted_text, reply_markup=keyboard, parse_mode="Markdown")
            
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (—á–∏—Å–ª–æ)")
            return
        
        await state.clear()
    
    # === CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
    
    async def handle_back_to_menu(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await state.clear()
        
        welcome_text = """
üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:
        """
        
        keyboard = Keyboards.create_main_menu()
        await callback.message.answer(welcome_text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
    
    async def handle_action_callback(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –¥–µ–π—Å—Ç–≤–∏–π"""
        action = callback.data.split(":")[1]
        
        if action == "search":
            await self.handle_search_button(callback.message, state)
        elif action == "get_row":
            await self.handle_get_row_button(callback.message, state)
        elif action == "show_columns":
            await self.handle_show_columns_button(callback.message)
        elif action == "edit_row":
            await self.handle_edit_button(callback.message, state)
        elif action == "all_rows":
            await self.handle_all_rows_button(callback.message)
        
        await callback.answer()

    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• –°–¢–†–û–ö ===
    
    async def handle_all_rows_button(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫"""
        user_id = message.from_user.id
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—Å–µ —Å—Ç—Ä–æ–∫–∏")
        
        try:
            await message.answer("üìÑ –ó–∞–≥—Ä—É–∂–∞—é –≤—Å–µ —Å—Ç—Ä–æ–∫–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await self._send_rows_page(message, page=1)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_all_rows_button: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _send_rows_page(self, message, page=1, edit_message=False):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏"""
        try:
            rows_per_page = 5
            self.logger.info(f"–ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page} —Å {rows_per_page} —Å—Ç—Ä–æ–∫–∞–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É")
            
            page_rows, total_pages, total_rows = self.sheets_service.get_all_rows_paginated(page, rows_per_page)
            
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ: {len(page_rows)} —Å—Ç—Ä–æ–∫, —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}, –≤—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {total_rows}")
            
            if not page_rows:
                keyboard = Keyboards.create_back_to_menu_keyboard()
                text = "üìÑ <b>–í—Å–µ —Å—Ç—Ä–æ–∫–∏</b>\n\n‚ùå –°—Ç—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞."
                
                if edit_message:
                    await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
                else:
                    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–æ–∫–∞—Ö
            text_parts = [
                f"üìÑ <b>–í—Å–µ —Å—Ç—Ä–æ–∫–∏</b> (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})",
                f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {total_rows}",
                "",
                "<b>–°—Ç—Ä–æ–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ:</b>"
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
            columns = self.sheets_service.get_columns()
            for row_info in page_rows:
                row_number = row_info['row_number']
                row_data = row_info['data']
                
                # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
                preview_parts = []
                for i, value in enumerate(row_data[:3]):  # –ü–µ—Ä–≤—ã–µ 3 –∑–Ω–∞—á–µ–Ω–∏—è
                    if value and i < len(columns):
                        column_name = columns[i] if i < len(columns) else f"Col{i+1}"
                        safe_column = str(column_name).replace('<', '&lt;').replace('>', '&gt;').replace('&', '&amp;')
                        safe_value = str(value)[:20].replace('<', '&lt;').replace('>', '&gt;').replace('&', '&amp;')
                        preview_parts.append(f"{safe_column}: {safe_value}")
                
                preview = " | ".join(preview_parts) if preview_parts else "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞"
                text_parts.append(f"<b>[{row_number}]</b> {preview}")
            
            text_parts.append("")
            text_parts.append("üëÜ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            
            result_text = "\n".join(text_parts)
            keyboard = Keyboards.create_pagination_keyboard(page, total_pages, page_rows, "page")
            
            if edit_message:
                await message.edit_text(result_text, reply_markup=keyboard, parse_mode="HTML")
            else:
                await message.answer(result_text, reply_markup=keyboard, parse_mode="HTML")
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _send_rows_page: {e}")
            error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if edit_message:
                await message.edit_text(error_text)
            else:
                await message.answer(error_text)
    
    async def handle_pagination(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""
        user_id = callback.from_user.id
        data_parts = callback.data.split(":")
        
        if len(data_parts) < 3:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
            return
        
        action = data_parts[1]  # prev, next, goto, info
        
        if action == "info":
            await callback.answer("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ", show_alert=True)
            return
        
        try:
            current_page = int(data_parts[2])
            new_page = current_page
            
            if action == "prev":
                new_page = max(1, current_page - 1)
            elif action == "next":
                new_page = current_page + 1
            elif action == "goto":
                new_page = current_page  # –£–∂–µ –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {new_page}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await self._send_rows_page(callback.message, new_page, edit_message=True)
            await callback.answer(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {new_page}")
        
        except (ValueError, IndexError) as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
        
        # –£–±–∏—Ä–∞–µ–º —ç—Ç–æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π callback.answer()

    # === –í–†–ï–ú–ï–ù–ù–´–ô –û–¢–õ–ê–î–û–ß–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö ===
    
    async def handle_unhandled_text(self, message: Message):
        """–í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = message.from_user.id
        text = message.text
        self.logger.warning(f"–ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{text}' (–¥–ª–∏–Ω–∞: {len(text)}, bytes: {text.encode('utf-8')})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –Ω–∞—à–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ (–≤–∫–ª—é—á–∞—è –∏—Å–∫–∞–∂–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã)
        if text in ["üìÑ –í—Å–µ —Å—Ç—Ä–æ–∫–∏"]:
            self.logger.info("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ! –í—ã–∑—ã–≤–∞–µ–º handle_all_rows_button")
            await self.handle_all_rows_button(message)
        elif text in ["üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã"]:
            self.logger.info("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ! –í—ã–∑—ã–≤–∞–µ–º handle_show_columns_button")
            await self.handle_show_columns_button(message)
        elif text in ["üîç –ü–æ–∏—Å–∫ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é"]:
            self.logger.info("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ! –í—ã–∑—ã–≤–∞–µ–º handle_search_button")
            await self.handle_search_button(message, state=None)
        elif text in ["üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ –Ω–æ–º–µ—Ä—É"]:
            self.logger.info("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ! –í—ã–∑—ã–≤–∞–µ–º handle_get_row_button")
            await self.handle_get_row_button(message, state=None)
        elif text in ["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É"]:
            self.logger.info("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ! –í—ã–∑—ã–≤–∞–µ–º handle_edit_button")
            await self.handle_edit_button(message, state=None)
        elif text in ["‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É"]:
            self.logger.info("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ! –í—ã–∑—ã–≤–∞–µ–º handle_create_new_row_button")
            await self.handle_create_new_row_button(message)
        elif text in ["üßÆ –†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏"]:
            self.logger.info("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ! –í—ã–∑—ã–≤–∞–µ–º handle_formulas_button")
            await self.handle_formulas_button(message)
        elif text in ["üìù –ü–æ–º–æ—â—å"]:
            self.logger.info("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ! –í—ã–∑—ã–≤–∞–µ–º handle_help_button")
            await self.handle_help_button(message)
        elif text in ["‚ÑπÔ∏è –û –±–æ—Ç–µ"]:
            self.logger.info("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ! –í—ã–∑—ã–≤–∞–µ–º handle_about_button")
            await self.handle_about_button(message)
        else:
            await message.answer(f"ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{text}'\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–û–ô –°–¢–†–û–ö–ò ===
    
    async def handle_create_new_row_button(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"""
        user_id = message.from_user.id
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏")
        
        columns = self.sheets_service.get_columns()
        
        if not columns:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        new_row_data = [''] * len(columns)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        await self._show_new_row_interface(message, columns, new_row_data)
    
    async def _show_new_row_interface(self, message, columns, row_data, edit_message=False):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"""
        text_parts = ["‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏</b>\n"]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–µ–π
        for i, (column_name, value) in enumerate(zip(columns, row_data)):
            if column_name:
                safe_column = str(column_name).replace('<', '&lt;').replace('>', '&gt;').replace('&', '&amp;')
                if value:
                    safe_value = str(value).replace('<', '&lt;').replace('>', '&gt;').replace('&', '&amp;')
                    text_parts.append(f"<b>{i+1}. {safe_column}:</b> {safe_value}")
                else:
                    text_parts.append(f"<b>{i+1}. {safe_column}:</b> <i>(–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)</i>")
        
        text_parts.append("\nüëÜ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:")
        
        text = "\n".join(text_parts)
        keyboard = Keyboards.create_new_row_keyboard(columns)
        
        if edit_message:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        else:
            await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    
    async def handle_fill_field(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"""
        user_id = callback.from_user.id
        data_parts = callback.data.split(":")
        row_type = data_parts[1]  # "new"
        column_number = int(data_parts[2])
        
        if row_type != "new":
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        columns = self.sheets_service.get_columns()
        column_name = columns[column_number - 1] if column_number <= len(columns) else f"–°—Ç–æ–ª–±–µ—Ü {column_number}"
        
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–µ '{column_name}' –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
        current_data = await state.get_data()
        row_data = current_data.get('new_row_data', [''] * len(columns))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data({
            'new_row_data': row_data,
            'filling_column': column_number,
            'column_name': column_name
        })
        
        await state.set_state(NewRowStates.filling_field)
        
        current_value = row_data[column_number - 1] if column_number <= len(row_data) else ""
        current_text = f" (—Ç–µ–∫—É—â–µ–µ: {current_value})" if current_value else ""
        
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—è '{column_name}'</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ{current_text}:",
            parse_mode="HTML"
        )
        await callback.answer()
    
    async def handle_new_row_field_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"""
        user_id = message.from_user.id
        new_value = message.text.strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        row_data = data.get('new_row_data', [])
        column_number = data.get('filling_column', 1)
        column_name = data.get('column_name', '–ü–æ–ª–µ')
        
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∑–Ω–∞—á–µ–Ω–∏–µ '{new_value}' –¥–ª—è –ø–æ–ª—è '{column_name}'")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        if column_number <= len(row_data):
            row_data[column_number - 1] = new_value
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await state.update_data({'new_row_data': row_data})
        await state.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        columns = self.sheets_service.get_columns()
        await message.answer(f"‚úÖ –ü–æ–ª–µ '{column_name}' –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: {new_value}")
        await self._show_new_row_interface(message, columns, row_data)
    
    async def handle_save_new_row(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"""
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        data = await state.get_data()
        row_data = data.get('new_row_data', [])
        
        if not any(row_data):
            await callback.answer("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ", show_alert=True)
            return
        
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
        new_row_number = self.sheets_service.add_new_row(row_data)
        
        if new_row_number:
            await callback.message.edit_text(
                f"‚úÖ <b>–ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                f"–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: <b>{new_row_number}</b>\n"
                f"–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π: <b>{sum(1 for x in row_data if x)}</b>",
                parse_mode="HTML"
            )
            await state.clear()
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        await callback.answer()
    
    async def handle_clear_new_row(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª–µ–π –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"""
        user_id = callback.from_user.id
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—á–∏—â–∞–µ—Ç –ø–æ–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏")
        
        columns = self.sheets_service.get_columns()
        empty_row_data = [''] * len(columns)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data({'new_row_data': empty_row_data})
        
        await self._show_new_row_interface(callback.message, columns, empty_row_data, edit_message=True)
        await callback.answer("üóëÔ∏è –í—Å–µ –ø–æ–ª—è –æ—á–∏—â–µ–Ω—ã")
    
    async def handle_cancel_new_row(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"""
        user_id = callback.from_user.id
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏")
        
        await state.clear()
        
        await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback.answer()

    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ê–ë–û–¢–´ –° –§–û–†–ú–£–õ–ê–ú–ò ===
    
    async def handle_formulas_button(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏"""
        user_id = message.from_user.id
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é —Ñ–æ—Ä–º—É–ª")
        
        keyboard = Keyboards.create_formulas_menu()
        await message.answer(
            "üßÆ <b>–†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ Google Sheets</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    
    async def handle_formula_callback(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏"""
        user_id = callback.from_user.id
        action = callback.data.split(":")[1]
        
        if action == "add":
            await self._handle_add_formula(callback, state)
        elif action == "view":
            await self._handle_view_formula(callback, state)
        elif action == "help":
            await self._handle_formula_help(callback)
        elif action == "examples":
            await self._handle_formula_examples(callback)
        elif action == "validate":
            await self._handle_validate_formula(callback, state)
        
        await callback.answer()
    
    async def _handle_add_formula(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª—ã"""
        await state.set_state(FormulaStates.waiting_for_cell_position)
        
        await callback.message.edit_text(
            "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã –≤ —è—á–µ–π–∫—É</b>\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é —è—á–µ–π–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ <code>A1</code> - —Å—Ç–æ–ª–±–µ—Ü A, —Å—Ç—Ä–æ–∫–∞ 1\n"
            "‚Ä¢ <code>B5</code> - —Å—Ç–æ–ª–±–µ—Ü B, —Å—Ç—Ä–æ–∫–∞ 5\n"
            "‚Ä¢ <code>2,3</code> - —Å—Ç—Ä–æ–∫–∞ 2, —Å—Ç–æ–ª–±–µ—Ü 3\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é —è—á–µ–π–∫–∏:",
            parse_mode="HTML"
        )
    
    async def _handle_view_formula(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ä–º—É–ª—ã"""
        await state.set_state(FormulaStates.waiting_for_cell_position)
        await state.update_data({'action': 'view'})
        
        await callback.message.edit_text(
            "üëÅÔ∏è <b>–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ä–º—É–ª—ã –≤ —è—á–µ–π–∫–µ</b>\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é —è—á–µ–π–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ä–º—É–ª—ã:\n"
            "‚Ä¢ <code>A1</code> - —Å—Ç–æ–ª–±–µ—Ü A, —Å—Ç—Ä–æ–∫–∞ 1\n"
            "‚Ä¢ <code>B5</code> - —Å—Ç–æ–ª–±–µ—Ü B, —Å—Ç—Ä–æ–∫–∞ 5\n"
            "‚Ä¢ <code>2,3</code> - —Å—Ç—Ä–æ–∫–∞ 2, —Å—Ç–æ–ª–±–µ—Ü 3\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é —è—á–µ–π–∫–∏:",
            parse_mode="HTML"
        )
    
    async def _handle_formula_help(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º"""
        help_text = """
üìö <b>–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ñ–æ—Ä–º—É–ª Google Sheets</b>

<b>üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ <code>=SUM(A1:A10)</code> - —Å—É–º–º–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
‚Ä¢ <code>=AVERAGE(A1:A10)</code> - —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
‚Ä¢ <code>=COUNT(A1:A10)</code> - –ø–æ–¥—Å—á–µ—Ç —á–∏—Å–µ–ª
‚Ä¢ <code>=MAX(A1:A10)</code> - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
‚Ä¢ <code>=MIN(A1:A10)</code> - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
‚Ä¢ <code>=ROUND(A1,2)</code> - –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 2 –∑–Ω–∞–∫–æ–≤

<b>üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ <code>=CONCATENATE(A1,B1)</code> - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ <code>=LEN(A1)</code> - –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ <code>=UPPER(A1)</code> - –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
‚Ä¢ <code>=LOWER(A1)</code> - –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä

<b>üìÖ –§—É–Ω–∫—Ü–∏–∏ –¥–∞—Ç—ã:</b>
‚Ä¢ <code>=TODAY()</code> - —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
‚Ä¢ <code>=NOW()</code> - —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
‚Ä¢ <code>=DATEDIF(A1,B1,"D")</code> - —Ä–∞–∑–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö

<b>‚ùì –õ–æ–≥–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ <code>=IF(A1>10,"–î–∞","–ù–µ—Ç")</code> - —É—Å–ª–æ–≤–∏–µ
‚Ä¢ <code>=AND(A1>0,B1<100)</code> - –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ò
‚Ä¢ <code>=OR(A1=1,B1=2)</code> - –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ò–õ–ò

<b>üîç –§—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞:</b>
‚Ä¢ <code>=VLOOKUP(A1,B:D,2,0)</code> - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
‚Ä¢ <code>=INDEX(B:B,MATCH(A1,C:C,0))</code> - –∏–Ω–¥–µ–∫—Å+–ø–æ–∏—Å–∫
        """
        
        keyboard = Keyboards.create_back_to_menu_keyboard()
        await callback.message.edit_text(help_text, reply_markup=keyboard, parse_mode="HTML")
    
    async def _handle_formula_examples(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ñ–æ—Ä–º—É–ª"""
        keyboard = Keyboards.create_formula_examples_keyboard()
        await callback.message.edit_text(
            "üßÆ <b>–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º—É–ª</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–º–µ—Ä–æ–≤:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    
    async def _handle_validate_formula(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º—É–ª—ã"""
        await state.set_state(FormulaStates.waiting_for_validation)
        
        await callback.message.edit_text(
            "üîß <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—É–ª—ã</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>=SUM(A1:A10)</code>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—É:",
            parse_mode="HTML"
        )
    
    async def handle_cell_position_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–∑–∏—Ü–∏–∏ —è—á–µ–π–∫–∏"""
        user_id = message.from_user.id
        position = message.text.strip().upper()
        
        # –ü–∞—Ä—Å–∏–º –ø–æ–∑–∏—Ü–∏—é —è—á–µ–π–∫–∏
        row_number, column_number = self._parse_cell_position(position)
        
        if not row_number or not column_number:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–∑–∏—Ü–∏–∏ —è—á–µ–π–∫–∏.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: A1, B5 –∏–ª–∏ 2,3"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        data = await state.get_data()
        action = data.get('action', 'add')
        
        if action == 'view':
            # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—É
            formula = self.sheets_service.get_cell_formula(row_number, column_number)
            
            if formula:
                await message.answer(
                    f"üëÅÔ∏è <b>–§–æ—Ä–º—É–ª–∞ –≤ —è—á–µ–π–∫–µ {position}</b>\n\n"
                    f"<code>{formula}</code>",
                    parse_mode="HTML"
                )
            else:
                await message.answer(f"‚ùå –í —è—á–µ–π–∫–µ {position} –Ω–µ—Ç —Ñ–æ—Ä–º—É–ª—ã –∏–ª–∏ —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞")
            
            await state.clear()
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—É
            await state.update_data({
                'row_number': row_number,
                'column_number': column_number,
                'position': position
            })
            await state.set_state(FormulaStates.waiting_for_formula)
            
            await message.answer(
                f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã –≤ —è—á–µ–π–∫—É {position}</b>\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—É (–±–µ–∑ –∑–Ω–∞–∫–∞ = –≤ –Ω–∞—á–∞–ª–µ):\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>SUM(A1:A10)</code>\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—É:",
                parse_mode="HTML"
            )
    
    async def handle_formula_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ñ–æ—Ä–º—É–ª—ã"""
        user_id = message.from_user.id
        formula = message.text.strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        row_number = data['row_number']
        column_number = data['column_number']
        position = data['position']
        
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º—É–ª—É '{formula}' –≤ —è—á–µ–π–∫—É {position}")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É–ª—É
        is_valid, message_text = self.sheets_service.validate_formula(formula)
        
        if not is_valid:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º—É–ª–µ: {message_text}")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—É
        success = self.sheets_service.update_cell_with_formula(row_number, column_number, formula)
        
        if success:
            await message.answer(
                f"‚úÖ <b>–§–æ—Ä–º—É–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
                f"–Ø—á–µ–π–∫–∞: <b>{position}</b>\n"
                f"–§–æ—Ä–º—É–ª–∞: <code>={formula}</code>",
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ä–º—É–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        await state.clear()
    
    async def handle_validation_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º—É–ª—ã"""
        formula = message.text.strip()
        
        is_valid, message_text = self.sheets_service.validate_formula(formula)
        
        if is_valid:
            await message.answer(f"‚úÖ <b>–§–æ—Ä–º—É–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!</b>\n\n<code>={formula}</code>", parse_mode="HTML")
        else:
            await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º—É–ª–µ:</b>\n{message_text}", parse_mode="HTML")
        
        await state.clear()
    
    async def handle_example_callback(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ñ–æ—Ä–º—É–ª"""
        example_type = callback.data.split(":")[1]
        
        examples = {
            "sum": "‚ûï <b>–°—É–º–º–∞ (SUM)</b>\n\n<code>=SUM(A1:A10)</code> - —Å—É–º–º–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ A1:A10\n<code>=SUM(A1,B1,C1)</code> - —Å—É–º–º–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —è—á–µ–µ–∫\n<code>=SUM(A:A)</code> - —Å—É–º–º–∞ –≤—Å–µ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ A",
            "average": "üìä <b>–°—Ä–µ–¥–Ω–µ–µ (AVERAGE)</b>\n\n<code>=AVERAGE(A1:A10)</code> - —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞\n<code>=AVERAGE(A1,B1,C1)</code> - —Å—Ä–µ–¥–Ω–µ–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —è—á–µ–µ–∫\n<code>=AVERAGEIF(A1:A10,\">10\")</code> - —Å—Ä–µ–¥–Ω–µ–µ —Å —É—Å–ª–æ–≤–∏–µ–º",
            "count": "üìà <b>–ü–æ–¥—Å—á–µ—Ç (COUNT)</b>\n\n<code>=COUNT(A1:A10)</code> - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª\n<code>=COUNTA(A1:A10)</code> - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫\n<code>=COUNTIF(A1:A10,\">10\")</code> - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å —É—Å–ª–æ–≤–∏–µ–º",
            "vlookup": "üîç <b>–ü–æ–∏—Å–∫ (VLOOKUP)</b>\n\n<code>=VLOOKUP(A1,B:D,2,0)</code> - —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫\n<code>=VLOOKUP(A1,B:D,3,1)</code> - –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫\n<code>=IFERROR(VLOOKUP(A1,B:D,2,0),\"–ù–µ –Ω–∞–π–¥–µ–Ω–æ\")</code> - —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫",
            "date": "üìÖ <b>–î–∞—Ç–∞ (TODAY/NOW)</b>\n\n<code>=TODAY()</code> - —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞\n<code>=NOW()</code> - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\n<code>=DATEDIF(A1,TODAY(),\"D\")</code> - –¥–Ω–µ–π –¥–æ —Å–µ–≥–æ–¥–Ω—è",
            "text": "üî§ <b>–¢–µ–∫—Å—Ç (CONCATENATE)</b>\n\n<code>=CONCATENATE(A1,\" \",B1)</code> - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–±–µ–ª–æ–º\n<code>=A1&\" \"&B1</code> - —Ç–æ –∂–µ —Å–∞–º–æ–µ, –∫–æ—Ä–æ—á–µ\n<code>=UPPER(A1)</code> - –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä",
            "if": "‚ùì <b>–£—Å–ª–æ–≤–∏–µ (IF)</b>\n\n<code>=IF(A1>10,\"–ë–æ–ª—å—à–µ\",\"–ú–µ–Ω—å—à–µ\")</code> - –ø—Ä–æ—Å—Ç–æ–µ —É—Å–ª–æ–≤–∏–µ\n<code>=IF(A1=\"\",\"–ü—É—Å—Ç–æ\",A1)</code> - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É\n<code>=IF(AND(A1>0,B1<100),\"OK\",\"–û—à–∏–±–∫–∞\")</code> - —Å –ª–æ–≥–∏–∫–æ–π",
            "round": "üî¢ <b>–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ (ROUND)</b>\n\n<code>=ROUND(A1,2)</code> - –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π\n<code>=ROUNDUP(A1,0)</code> - –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö\n<code>=ROUNDDOWN(A1,0)</code> - –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–Ω–∏–∑"
        }
        
        example_text = examples.get(example_type, "–ü—Ä–∏–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        keyboard = Keyboards.create_formula_examples_keyboard()
        await callback.message.edit_text(example_text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    
    async def handle_back_to_formulas(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é —Ñ–æ—Ä–º—É–ª"""
        keyboard = Keyboards.create_formulas_menu()
        await callback.message.edit_text(
            "üßÆ <b>–†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ Google Sheets</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    
    def _parse_cell_position(self, position):
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏ —è—á–µ–π–∫–∏"""
        try:
            if ',' in position:
                # –§–æ—Ä–º–∞—Ç "2,3" (—Å—Ç—Ä–æ–∫–∞, —Å—Ç–æ–ª–±–µ—Ü)
                parts = position.split(',')
                if len(parts) == 2:
                    row_number = int(parts[0].strip())
                    column_number = int(parts[1].strip())
                    return row_number, column_number
            else:
                # –§–æ—Ä–º–∞—Ç "A1" (—Å—Ç–æ–ª–±–µ—Ü –±—É–∫–≤–æ–π, —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–ª–æ–º)
                import re
                match = re.match(r'^([A-Z]+)(\d+)$', position)
                if match:
                    column_letters = match.group(1)
                    row_number = int(match.group(2))
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±—É–∫–≤—ã —Å—Ç–æ–ª–±—Ü–∞ –≤ —á–∏—Å–ª–æ
                    column_number = 0
                    for char in column_letters:
                        column_number = column_number * 26 + (ord(char) - ord('A') + 1)
                    
                    return row_number, column_number
            
            return None, None
            
        except (ValueError, AttributeError):
            return None, None

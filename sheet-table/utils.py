def format_row_data(row_data, columns):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    if not row_data or not columns:
        return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    
    formatted_lines = []
    data = row_data['data']
    row_number = row_data['row_number']
    
    formatted_lines.append(f"üìã **–°—Ç—Ä–æ–∫–∞ {row_number}:**\n")
    
    for i, (column_name, value) in enumerate(zip(columns, data)):
        if column_name:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞
            display_value = escape_markdown(str(value)) if value else "‚Äî"
            safe_column = escape_markdown(str(column_name))
            formatted_lines.append(f"**{safe_column}:** {display_value}")
    
    return "\n".join(formatted_lines)


def format_search_results(found_rows, search_value):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"""
    if not found_rows:
        return f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '**{search_value}**' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    
    result_lines = [f"üîç –ù–∞–π–¥–µ–Ω–æ {len(found_rows)} —Å—Ç—Ä–æ–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '**{search_value}**':\n"]
    
    for i, row_info in enumerate(found_rows[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        row_number = row_info['row_number']
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–≤—å—é
        preview_data = ' | '.join([str(val) for val in row_info['data'][:3] if val])
        if len(preview_data) > 60:
            preview_data = preview_data[:57] + "..."
        
        result_lines.append(f"{i+1}. **[{row_number}]** {preview_data}")
    
    if len(found_rows) > 10:
        result_lines.append(f"\n... –∏ –µ—â–µ {len(found_rows) - 10} —Å—Ç—Ä–æ–∫")
    
    result_lines.append("\nüìå –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:")
    
    return "\n".join(result_lines)


def format_columns_list(columns):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤"""
    if not columns:
        return "‚ùå –°—Ç–æ–ª–±—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    result_lines = ["üìä **–°—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã:**\n"]
    
    for i, column_name in enumerate(columns, 1):
        if column_name:
            safe_column = escape_markdown(str(column_name))
            result_lines.append(f"{i}\\. **{safe_column}**")
        else:
            result_lines.append(f"{i}\\. *\\(–ø—É—Å—Ç–æ–π —Å—Ç–æ–ª–±–µ—Ü\\)*")
    
    return "\n".join(result_lines)


def truncate_text(text, max_length=100):
    """–û–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return text
    return text[:max_length-3] + "..."


def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown"""
    if not text:
        return text
    
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    
    return text
